args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
  variable_narccap <- 'Prec' # Temp or Prec
  type<-"Matern"
  model<-"SVC"
  analysis<-"M3"
  datasetfile=paste0("data_narccap/dataset",
                     variable_narccap,".Rdata")
} else {
  variable_narccap <-args[1]
  type<-args[2]
  model<-args[3]
  analysis<-args[4]
  datasetfile=paste0("data_narccap/dataset",
                     variable_narccap,".Rdata")
}

# i<-1:100
# type<-'Exponential', "Matern"
# model<-'SVC', "SVI"
# analysis<-"M1: likelihood", "M2: FSA", "M3: MRA2"

source("1.MRA_resolution_general.R")
source('covariances.R')
source('likelihoodK_general.R')
library(MCMCpack)
library(truncdist)
library(invgamma)
library(Matrix)
library(mvtnorm)
library(truncnorm)
library(CholWishart)
library(tmvtnorm)
library(tictoc)

nCov_f <- 3
nCov_v <- 2

nlevels_P <- 2
nlevels_A <- 2

aa_P<-gen_resolution(datasetfile,nCov_v,nlevels_P)
aa_A<-gen_resolution(datasetfile,nCov_v,nlevels_A)
#Tm <- aa[[1]]
#TSm <- aa[[2]]
#Qlist <- aa[[3]]
#nn<-aa[[4]]
#hh <- Qlist[[nn+2]]

Qlist <- aa_A[[3]]
nn <- aa_A[[4]]
hh <- Qlist[[nn+2]]

#library(gstat)
#vv <- variogram(Y~1,data = hh,cutoff=2200)
#plot(vv)
#### Metropolis Hastings

# initial values


nu <- 0.5
beta <- c(0,rep(1,nCov_f-1))
taub <- 2
sigma2 <- 0.5
A2 <- diag(nCov_v)


start_beta <- beta
start_A2 <- A2
start_Phi <- c(750
,750)
start_tau <- 0.1
start_Nu <- rep(nu,2)

N <- dim(hh)[1]
#npar <- length(startvalue)

# fixed
types <- rep(type,nCov_v)

#Data
Y <- hh$Y
#X <- data.matrix(st_drop_geometry(hh %>% mutate(interc = 1) %>% 
#                                    dplyr::select(interc,TREFHT,OMEGA,PSL,U,V)))
#XR <- scale(X[,c(2,3,4,5,6)])
X <- data.matrix(st_drop_geometry(hh %>% mutate(interc = 1) %>% 
                                    dplyr::select(interc,TREFHT,PSL)))
if(model=="SVC"){
  #XR <- scale(X[,c(2,3)])
  XR <- X[,c(2,3)]
}else{
  XR <- X[,c(1)]
}

#XR <- X[,c(1)]


##################
# L functions    #
##################
f_P_Nu <- function(beta,A2,Phi,Nu,tau,m2loglike_old,Phi_m,sd_Phi,Nu_m,sd_Nu,status){
  if(status=='new'){
    MRA_num <- aa_P[[4]]
    m2loglike_prop <- likelihoodMRA(beta,A2,Phi,Nu,nCov_v,tau=1,sigma2=tau,model,type,MRA_num,Y,X,XR,aa_P)
    m2logv <- m2loglike_prop$m2logv
    SigmaYinv <- m2loglike_prop$SigmaYinv
    logSigmaYdet <- m2loglike_prop$logSigmaYdet
  }else{
    m2logv <- m2loglike_old
  }
  logpriorphi   <- sum(dunif(Phi,0,3500,log=TRUE)) 
  if(type=='Exponential'){
    logprior <- logpriorphi
  }else{
    logpriornu    <- sum(dunif(Nu,0,1,log=TRUE)) 
    logprior <- logpriorphi+logpriornu
  }
  logproposal <- log(dtruncnorm(Phi[1],a = 50,b = 2000,mean = Phi_m[1],sd = sd_Phi[1]))
  logproposal <- logproposal + log(dtruncnorm(Phi[2],a = 50,b = 2000,mean = Phi_m[2],sd = sd_Phi[2]))
  
  if(type=='Matern'){
    logproposal_Nu <- log(dtruncnorm(Nu[1],a = 0,b = 10,mean = Nu_m[1],sd = sd_Nu[1]))
    logproposal_Nu <- logproposal_Nu + log(dtruncnorm(Nu[2],a = 0,b = 10,mean = Nu_m[2],sd = sd_Nu[2]))
    logproposal <- logproposal + logproposal_Nu
  }
  like <- -(m2logv/2) +logprior + logproposal
  
  if(status=='new'){
    f_result <- list(like=as.numeric(like),m2logv=m2logv,
                     SigmaYinv=SigmaYinv,logSigmaYdet=logSigmaYdet)
  }else{
    f_result <- list(like=as.numeric(like),m2logv=m2logv)
  }
  return(f_result)
}

f_tau <- function(beta,A2,Phi,Nu,tau,m2loglike_old,tau_m,sd_tau,status){
  if(status=='new'){
    MRA_num <- aa_P[[4]]
    m2loglike_prop <- likelihoodMRA(beta,A2,Phi,Nu,nCov_v,tau=1,sigma2=tau,model,type,MRA_num,Y,X,XR,aa_P)
    m2logv <- m2loglike_prop$m2logv
    SigmaYinv <- m2loglike_prop$SigmaYinv
    logSigmaYdet <- m2loglike_prop$logSigmaYdet
  }else{
    m2logv <- m2loglike_old
  }
  logprior <- dinvgamma(tau,shape = 2,scale = 100,log = T)
  logproposal <- log(dtruncnorm(tau,a = 0,b = 1,mean = tau_m,sd = sd_tau))
  like <- -(m2logv/2) +logprior + logproposal
  
  if(status=='new'){
    f_result <- list(like=as.numeric(like),m2logv=m2logv,
                     SigmaYinv=SigmaYinv,logSigmaYdet=logSigmaYdet)
  }else{
    f_result <- list(like=as.numeric(like),m2logv=m2logv)
  }
  return(f_result)
}

f_A2 <- function(beta,A2,Phi,Nu,tau,m2loglike_old,A2_m,a_n_1,status){
  if(status=='new'){
    MRA_num <- aa_A[[4]]
    m2loglike_prop <- likelihoodMRA(beta,A2,Phi,Nu,nCov_v,tau=1,sigma2=tau,model,type,nn,Y,X,XR,aa_A)
    m2logv <- m2loglike_prop$m2logv
    SigmaYinv <- m2loglike_prop$SigmaYinv
    logSigmaYdet <- m2loglike_prop$logSigmaYdet
    muhat <- m2loglike_prop$muhat
  }else{
    m2logv <- m2loglike_old
  }
  p <- dim(A2)[1] 
  if(p==1){
    logpriorA2 <- dgamma(A2,shape = 10,scale = 1,log = T)
    logproposal <- dgamma(A2,shape = a_n_1/2,scale = 2*A2_m/a_n_1,log = T)
  }else{
    #browser()
    ut_A2 <- A2[upper.tri(A2)]
    ut_A2m <- A2_m[upper.tri(A2_m)]
    lmean_A <- length(ut_A2)
    logpriorA2 <- dunif(ut_A2,min = -1,max = 0)
    logproposal <- dtmvnorm(ut_A2,mean = ut_A2m,sigma = (1/a_n_1)*diag(lmean_A),
                            lower = rep(-1,lmean_A),upper = rep(0,lmean_A),log = T)
  }
  logprior <- logpriorA2
  like <- -(m2logv/2) +logprior + logproposal
  
  if(status=='new'){
    f_result <- list(like=as.numeric(like),m2logv=m2logv,
                     SigmaYinv=SigmaYinv,logSigmaYdet=logSigmaYdet,
                     muhat=muhat)
  }else{
    f_result <- list(like=as.numeric(like),m2logv=m2logv)
  }
  return(f_result)
}

##################
# Main M-H  loop #
##################

Gibbs_beta <- function(SigmaYinv,beta_n){
  #Sigma_beta <- 100*diag(beta_n)
  Sigma_beta <- diag(c(0.05,0.05,0.01))^2
  Sigma_beta_inv <- Sigma_beta
  mu_beta <- c(0,rep(1,beta_n-1))
  
  Sigma_beta_inv_p <- t(X)%*%SigmaYinv%*%X+Sigma_beta_inv
  Sigma_beta_p <- solve(Sigma_beta_inv_p)
  mu_beta_p <- Sigma_beta_p %*% (t(X)%*%SigmaYinv%*%Y+Sigma_beta_inv%*%mu_beta)
  
  Sigma_beta_p <- forceSymmetric(Sigma_beta_p)
  beta_sample <- rmvnorm(1,mean = mu_beta_p,sigma = as.matrix(Sigma_beta_p))
  return(beta_sample)
}


proposalfunction_Phi <- function(chain,i,sd_Phi){
  sd <- sd_Phi
  if (is.null(dim(chain)[1])){
    mu <- chain
  }else{
    mu <- chain[i,]
  }
  Yn <- c(rtruncnorm(1,a = 50,b = 2000,mean = mu[1],sd = sd[1]),
          rtruncnorm(1,a = 50,b = 2000,mean = mu[2],sd = sd[2]))
  #Yn <- c(2000,2000)
  return(Yn)
}

proposalfunction_Nu <- function(chain,i,sd_Nu){
  sd <- sd_Nu
  if (is.null(dim(chain)[1])){
    mu <- chain
  }else{
    mu <- chain[i,]
  }
  Yn <- c(rtruncnorm(1,a = 0,b = 10,mean = mu[1],sd = sd[1]),
          rtruncnorm(1,a = 0,b = 10,mean = mu[2],sd = sd[2]))
  return(Yn)
}

proposalfunction_A2 <- function(chain,i,a_n_1){
  #https://stats.stackexchange.com/questions/77038/covariance-matrix-proposal-distribution
  Sigma <- chain[[i]]
  mean_A <- Sigma[upper.tri(Sigma)]
  lmean_A <- length(mean_A)
  prop_A <- rtmvnorm(1,mean = mean_A,sigma = (1/a_n_1)*diag(lmean_A),
                     lower = rep(-1,lmean_A),upper = rep(0,lmean_A))
  prop_A2 <- diag(dim(Sigma)[1])
  prop_A2[upper.tri(prop_A2)] <- prop_A2[lower.tri(prop_A2)] <- prop_A
  return(prop_A2)
}

proposalfunction_tau <- function(chain,i,sd_tau){
  #tauprop <- rgamma(1,shape = chain[i]/sd_tau,scale = sd_tau)
  tauprop <- rtruncnorm(1,a = 0,b = 1,mean = chain[i],sd = sd_tau)
  #tauprop <- 1
  return(tauprop)
}

run_metropolis_MCMC <- function(start_beta,start_A2,start_Phi,start_Nu,start_tau,iterations){
  chain_beta <- array(dim = c(iterations+1,length(start_beta)))
  chain_beta[1,] <- start_beta
  chain_A2 <- list()
  chain_A2[[1]] <- start_A2
  p <- dim(start_A2)[1]
  chain_Phi <- array(dim = c(iterations+1,length(start_Phi)))
  chain_Phi[1,] <- start_Phi
  chain_tau <- rep(0,iterations+1)
  chain_tau[1] <- start_tau
  chain_Nu <- array(dim = c(iterations+1,length(start_Nu)))
  chain_Nu[1,] <- start_Nu
  
  #Nu <- rep(0.5,2)
  like_res_start <- likelihoodMRA(chain_beta[1,],chain_A2[[1]],chain_Phi[1,],chain_Nu[1,],
                                  nCov_v,tau=1,chain_tau[1],model,type,nn,Y,X,XR,aa_A)
  SigmaYinv_old <- like_res_start$SigmaYinv
  logSigmaYdet_old <- like_res_start$logSigmaYdet
  
  sd_Phi <- c(50,50)
  a_n_1 <- 100
  sd_tau <- 0.05
  sd_Nu <- c(0.1,0.1)
  Ysample <- matrix(0,nrow = dim(SigmaYinv_old)[1],ncol = iterations)
  
  for (i in 1:iterations){
    show(i)
    tic()
    ## Gibbs Beta###
    chain_beta[i+1,] <- Gibbs_beta(SigmaYinv_old,dim(chain_beta)[2])
    
    m2loglike_old <- likelihood_no_MRA(chain_beta[i+1,],SigmaYinv_old,
                                       logSigmaYdet_old,Y,X)
    proposal_Phi <- proposalfunction_Phi(chain_Phi[c(1:i),],i,sd_Phi)
    proposal_A2 <- proposalfunction_A2(chain_A2,i,a_n_1)
    proposal_tau <- proposalfunction_tau(chain_tau,i,sd_tau)
    proposal_Nu <- proposalfunction_Nu(chain_Nu,i,sd_Nu)
    if(type=='Exponential'){
      proposal_Nu <- c(0.5,0.5)
    }
    ## MCMC Phi-Nu###
    fold_Phi_Nu <- f_P_Nu(chain_beta[i+1,],chain_A2[[i]],chain_Phi[i,],chain_Nu[i,],chain_tau[i],m2loglike_old,proposal_Phi,sd_Phi,proposal_Nu,sd_Nu,'old')$like
    fnew_Phi_Nu_p <- f_P_Nu(chain_beta[i+1,],chain_A2[[i]],proposal_Phi,proposal_Nu,chain_tau[i],m2loglike_old,chain_Phi[i,],sd_Phi,chain_Nu[i,],sd_Nu,'new')
    fnew_Phi_Nu <- fnew_Phi_Nu_p$like
    
    probab_Phi_Nu <- min(0,fnew_Phi_Nu -fold_Phi_Nu)
    if(is.nan(fnew_Phi_Nu -fold_Phi_Nu)){
      probab_Phi_Nu <- -Inf
    }
    alpha_Phi_Nu <- exp(probab_Phi_Nu)
    if (log(runif(1)) <= probab_Phi_Nu){
      chain_Phi[i+1,] <- proposal_Phi
      chain_Nu[i+1,] <- proposal_Nu
      SigmaYinv_old <- fnew_Phi_Nu_p$SigmaYinv
      logSigmaYdet_old <- fnew_Phi_Nu_p$logSigmaYdet
    }else{
      chain_Phi[i+1,] <- chain_Phi[i,]
      chain_Nu[i+1,] <- chain_Nu[i,]
    }
    d <- 1
    eta_n <- min(1,d*i^{-2/3}) 
    alpha_star <- 0.234
    sd_Phi[1] <- sqrt(sd_Phi[1]^2*(1+eta_n*(alpha_Phi_Nu-alpha_star)))
    sd_Phi[2] <- sqrt(sd_Phi[2]^2*(1+eta_n*(alpha_Phi_Nu-alpha_star)))
    sd_Phi[1] <- min(sd_Phi[1],700)
    sd_Phi[2] <- min(sd_Phi[2],700)
    sd_Nu[1] <- sqrt(sd_Nu[1]^2*(1+eta_n*(alpha_Phi_Nu-alpha_star)))
    sd_Nu[2] <- sqrt(sd_Nu[2]^2*(1+eta_n*(alpha_Phi_Nu-alpha_star)))
    
    ## MCMC tau###
    fold_tau <- f_tau(chain_beta[i+1,],chain_A2[[i]],chain_Phi[i+1,],chain_Nu[i+1,],chain_tau[i],m2loglike_old,proposal_tau,sd_tau,'old')$like
    fnew_tau_p <- f_tau(chain_beta[i+1,],chain_A2[[i]],chain_Phi[i+1,],chain_Nu[i+1,],proposal_tau,m2loglike_old,chain_tau[i],sd_tau,'new')
    fnew_tau <- fnew_tau_p$like
    
    probab_tau <- min(0,fnew_tau -fold_tau)
    if(is.nan(fnew_tau -fold_tau)){
      probab_tau <- -Inf
    }
    alpha_tau <- exp(probab_tau)
    if (log(runif(1)) <= probab_tau){
      chain_tau[i+1] <- proposal_tau
      SigmaYinv_old <- fnew_tau_p$SigmaYinv
      logSigmaYdet_old <- fnew_tau_p$logSigmaYdet
    }else{
      chain_tau[i+1] <- chain_tau[i]
    }
    d <- 1
    eta_n <- min(1,d*i^{-2/3}) 
    alpha_star <- 0.234
    sd_tau <- sqrt(sd_tau^2*(1+eta_n*(alpha_tau-alpha_star)))
    sd_tau <- min(0.5,sd_tau)
    
    ## MCMC A###
    fold_A2 <- f_A2(chain_beta[i+1,],chain_A2[[i]],chain_Phi[i+1,],chain_Nu[i+1,],chain_tau[i+1],m2loglike_old,proposal_A2,a_n_1,'old')$like
    fnew_A2_p <- f_A2(chain_beta[i+1,],proposal_A2,chain_Phi[i+1,],chain_Nu[i+1,],chain_tau[i+1],m2loglike_old,chain_A2[[i]],a_n_1,'new')
    fnew_A2 <- fnew_A2_p$like
    
    probab_A2 <- min(0,fnew_A2 -fold_A2)
    if(is.nan(fnew_A2 -fold_A2)){
      probab_A2 <- -Inf
    }
    alpha_A2 <- exp(probab_A2)
    if (log(runif(1)) <= probab_A2){
      chain_A2[[i+1]] <- proposal_A2
      SigmaYinv_old <- fnew_A2_p$SigmaYinv
      logSigmaYdet_old <- fnew_A2_p$logSigmaYdet
    }else{
      chain_A2[[i+1]] <- chain_A2[[i]]
    }
    d <- (dim(chain_A2[[1]])[1]+1)*dim(chain_A2[[1]])[1]/2
    eta_n <- min(1,d*i^{-2/3}) 
    alpha_star <- 0.234
    a_n_1_inv <- (1/a_n_1)*(1+eta_n*(alpha_A2-alpha_star))
    #a_n_1 <- max(1/a_n_1_inv,p+3)
    a_n_1 <- max(1/a_n_1_inv,2)
    show(c(alpha_A2,alpha_Phi_Nu,alpha_tau))
    show(c(chain_beta[i+1,],chain_Phi[i+1,],chain_Nu[i+1,],chain_A2[[i+1]],chain_tau[i+1],sd_Nu))
    
    # Prediction
    muhat <- fnew_A2_p$muhat
    SigmaYinv_old_f2 <- chol(forceSymmetric(SigmaYinv_old))
    Ysample[,i] <- as.matrix(SigmaYinv_old_f2%*%
                               rnorm(dim(SigmaYinv_old_f2)[1])+muhat)
    
    toc()
  }
  chain_result <- list(chain_beta=chain_beta,chain_A2=chain_A2,chain_Phi=chain_Phi,chain_Nu=chain_Nu,chain_tau=chain_tau)
  return(list(chain_result=chain_result,Ysample=Ysample))
}

print(paste("Model =",analysis,"/ Data =",datasetfile))

start_time <- Sys.time()

set.seed(100)
MCMC_results = run_metropolis_MCMC(start_beta,start_A2,start_Phi,start_Nu,start_tau,2000)
#burnIn = 200

end_time <- Sys.time()

print(end_time-start_time)

save(MCMC_results, file=paste0("sim_res/chain",variable_narccap,model,type,'NARCCAP',".Rdata"))

