#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 2
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
output_suffix
for(i in 2:2){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 2
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:2){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 2
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
model <- "MRA1" # "MRA2" #LKH (falta) ## funci'on aparte likelihood
i <- 2 # simulation ID # from 1 to 10
DEP<- "Exponential" # "Matern"  ## types
type <- DEP
nres <- 2 # or 2
nreps <- 10 # number of iterations for MCMC
####################################################################
####################################################################
########################  Set up ###################################
####################################################################
datasetfile=paste0("sim_data/dataset",
i,type,nres,
".Rdata")
load(datasetfile)
source('functions/packages.R')
#########################################
# hay que modificar de aqui en adelante #
#########################################
source("functions/1.MRA_resolution_general.R")
source('functions/covariances.R')
source('functions/likelihoodK_general.R')
source('functions/L_functions.R')
#
nCov_f <- 2 # fixed betas
nCov_v <- 1 # spatially varying betas
nlevels_P <- ifelse(model=="MRA2",2,1) # MRA number for phi
# nlevels_A <- ifelse(model=="MRA2",2,1) # MRA number for A (betas)
aa_P<-gen_resolution(datasetfile,nCov_v,nlevels_P)
# aa_A<-gen_resolution(datasetfile,nCov_v,nlevels_A)
Qlist <- aa_P[[3]]
nn <- aa_P[[4]]
hh <- Qlist[[nn+2]]
#
# ####################################################################
# ##################### Metropolis Hastings ##########################
# ####################################################################
#
# # initial values
beta <- c(1,1)
# taub <- 2
# sigma2 <- 1/taub
start_beta <- beta
# start_A2 <- A2
start_Phi <- c(3)
start_tau <- 0.6
N <- dim(hh)[1]
#
# # fixed
types <- c(type)
Nu <- rep(2, nCov_v)
A1 <- diag(nCov_v) ## A1
# #Data
Y <- hh$Y
covariates<- scale(dataset$X1)
X <- data.matrix(cbind(rep(1,N),covariates))
XR <- X[,c(1)] #scale(X[,c(1)])
#XR <- scale(X[,c(2,3)])
#
# ###################
# ## Main M-H loop ##
# ###################
#
Gibbs_beta <- function(SigmaYinv,beta_n){
Sigma_beta <- 1*diag(beta_n)
Sigma_beta_inv <- Sigma_beta
mu_beta <- c(1,1)
Sigma_beta_inv_p <- t(X)%*%SigmaYinv%*%X+Sigma_beta_inv
Sigma_beta_p <- solve(Sigma_beta_inv_p)
mu_beta_p <- Sigma_beta_p %*% (t(X)%*%SigmaYinv%*%Y+Sigma_beta_inv%*%mu_beta)
Sigma_beta_p <- forceSymmetric(Sigma_beta_p)
beta_sample <- mvtnorm::rmvnorm(1,mean = mu_beta_p,sigma = as.matrix(Sigma_beta_p))
return(beta_sample)
}
proposalfunction_Phi <- function(chain,i,sd_Phi){
sd <- sd_Phi
if (is.null(dim(chain)[1])){
mu <- chain
}else{
mu <- chain[i,]
}
Yn <- c(rtruncnorm(1,a = 0,b = 10,mean = mu[1],sd = sd[1]))#,
#rtruncnorm(1,a = 0.1,b = 20,mean = mu[2],sd = sd[2]))
#  Yn <- c(2000,2000)
return(Yn)
}
#   #https://stats.stackexchange.com/questions/77038/covariance-matrix-proposal-distribution
#   Sigma <- chain[[i]]
#   mean_A <- Sigma[upper.tri(Sigma)]
#   lmean_A <- length(mean_A)
#   prop_A <- rtmvnorm(1,mean = mean_A,sigma = (1/a_n_1)*diag(lmean_A),
#                      lower = rep(-1,lmean_A),upper = rep(0,lmean_A))
#   prop_A2 <- diag(dim(Sigma)[1])
#   prop_A2[upper.tri(prop_A2)] <- prop_A2[lower.tri(prop_A2)] <- prop_A
#   return(prop_A2)
# }
proposalfunction_tau <- function(chain,i,sd_tau){
#tauprop <- rgamma(1,shape = chain[i]/sd_tau,scale = sd_tau)
tauprop <- rtruncnorm(1,a = 0,b = 5,mean = chain[i],sd = sd_tau)
#tauprop <- 1
return(tauprop)
}
iterations=nreps
chain_beta <- array(dim = c(iterations+1,length(start_beta)))
chain_beta[1,] <- start_beta
#chain_A2 <- list()
#chain_A2[[1]] <- start_A2
#p <- dim(start_A2)[1]
chain_Phi <- array(dim = c(iterations+1,length(start_Phi)))
chain_Phi[1,] <- start_Phi
chain_tau <- rep(0,iterations+1)
chain_tau[1] <- start_tau
beta=chain_beta[1,]
A2=A1
Phi=chain_Phi[1,]
Nu
nCov=nCov_v
tau=chain_tau[1]
sigma2=1
nMRA=nn
aa=aa_P
tau
XR <- as.matrix(XR) #design matrix (only spatially-dependent covariates)
XX <- bdiag(purrr::map(1:dim(XR)[1],~t(XR[.,])))
XX
XR
#Augmented design matrix (only spatially-dependent covariates)
muhat <- X%*%beta # Mean of Y (design matrix includes all covariates)
Y <- as.matrix(Y)
muhat <- as.matrix(muhat)
matrices <- W_maker(nCov,Phi,Nu,A2,aa,sigma2,types)
Lambda_m <- matrices$Lambda #Precision matrix of MRA basis
B_m <- matrices$B # Projection matrix of observations on the knot space (Q)
quad_SigmaY <- 0
k=nMRA
Sigma_w <- B_m[[k+1]]%*%solve(Lambda_m[[k+1]])%*%t(B_m[[k+1]])
# XSigmae <- XX%*%Sigma_w%*%t(XX)+(1/tau) * diag(dim(XX)[1])
XSigmae <- XX%*%Sigma_w%*%t(XX)+(1/tau) * Diagonal(dim(XX)[1])
XSigmae
det(XSigmae)
# XSigmae <- XX%*%Sigma_w%*%t(XX)+(1/tau) * diag(dim(XX)[1])
XSigmae <- XX%*%Sigma_w%*%t(XX)+(1/tau) * Diagonal(dim(XX)[1])
XSigmae <- forceSymmetric(XSigmae)
SigmaYinv <- chol2inv(chol(XSigmae)) #Precision matrix of Y
logSigmaYdet <- log(det(XSigmae)) #log-determinant of covariance matrix of Y
like_res_start <- likelihoodMRA(beta=chain_beta[1,],
A2=A1,
Phi=chain_Phi[1,],
Nu,
nCov=nCov_v,
tau=chain_tau[1],
sigma2=1,
model,
nMRA=nn,
Y,X,XR,
aa=aa_P,
types)
SigmaYinv_old <- like_res_start$SigmaYinv
logSigmaYdet_old <- like_res_start$logSigmaYdet
logSigmaYdet_old
sd_Phi <- c(0.05)
#a_n_1 <- 100
sd_tau <- 0.001
Ysample <- matrix(0,nrow = dim(SigmaYinv_old)[1],ncol = iterations)
i=1
show(i)
tic()
chain_beta[i+1,] <- Gibbs_beta(SigmaYinv_old,dim(chain_beta)[2])
chain_beta[i+1,]
m2loglike_old <- likelihood_no_MRA(chain_beta[i+1,],SigmaYinv_old,
logSigmaYdet_old,Y,X)
m2loglike_old
proposal_Phi <- proposalfunction_Phi(chain_Phi[c(1:i),],i,sd_Phi)
proposal_Phi
#proposal_A2 <- proposalfunction_A2(chain_A2,i,a_n_1)
proposal_tau <- proposalfunction_tau(chain_tau,i,sd_tau)
proposal_tau
start_tau <- 1
N <- dim(hh)[1]
#
# # fixed
types <- c(type)
Nu <- rep(2, nCov_v)
A1 <- diag(nCov_v) ## A1
# #Data
Y <- hh$Y
covariates<- scale(dataset$X1)
X <- data.matrix(cbind(rep(1,N),covariates))
XR <- X[,c(1)] #scale(X[,c(1)])
#XR <- scale(X[,c(2,3)])
#
# ###################
# ## Main M-H loop ##
# ###################
#
Gibbs_beta <- function(SigmaYinv,beta_n){
Sigma_beta <- 1*diag(beta_n)
Sigma_beta_inv <- Sigma_beta
mu_beta <- c(1,1)
Sigma_beta_inv_p <- t(X)%*%SigmaYinv%*%X+Sigma_beta_inv
Sigma_beta_p <- solve(Sigma_beta_inv_p)
mu_beta_p <- Sigma_beta_p %*% (t(X)%*%SigmaYinv%*%Y+Sigma_beta_inv%*%mu_beta)
Sigma_beta_p <- forceSymmetric(Sigma_beta_p)
beta_sample <- mvtnorm::rmvnorm(1,mean = mu_beta_p,sigma = as.matrix(Sigma_beta_p))
return(beta_sample)
}
proposalfunction_Phi <- function(chain,i,sd_Phi){
sd <- sd_Phi
if (is.null(dim(chain)[1])){
mu <- chain
}else{
mu <- chain[i,]
}
Yn <- c(rtruncnorm(1,a = 0,b = 10,mean = mu[1],sd = sd[1]))#,
#rtruncnorm(1,a = 0.1,b = 20,mean = mu[2],sd = sd[2]))
#  Yn <- c(2000,2000)
return(Yn)
}
#   #https://stats.stackexchange.com/questions/77038/covariance-matrix-proposal-distribution
#   Sigma <- chain[[i]]
#   mean_A <- Sigma[upper.tri(Sigma)]
#   lmean_A <- length(mean_A)
#   prop_A <- rtmvnorm(1,mean = mean_A,sigma = (1/a_n_1)*diag(lmean_A),
#                      lower = rep(-1,lmean_A),upper = rep(0,lmean_A))
#   prop_A2 <- diag(dim(Sigma)[1])
#   prop_A2[upper.tri(prop_A2)] <- prop_A2[lower.tri(prop_A2)] <- prop_A
#   return(prop_A2)
# }
proposalfunction_tau <- function(chain,i,sd_tau){
#tauprop <- rgamma(1,shape = chain[i]/sd_tau,scale = sd_tau)
tauprop <- rtruncnorm(1,a = 0,b = 5,mean = chain[i],sd = sd_tau)
#tauprop <- 1
return(tauprop)
}
chain_beta <- array(dim = c(iterations+1,length(start_beta)))
chain_beta[1,] <- start_beta
#chain_A2 <- list()
#chain_A2[[1]] <- start_A2
#p <- dim(start_A2)[1]
chain_Phi <- array(dim = c(iterations+1,length(start_Phi)))
chain_Phi[1,] <- start_Phi
chain_tau <- rep(0,iterations+1)
chain_tau[1] <- start_tau
like_res_start <- likelihoodMRA(beta=chain_beta[1,],
A2=A1,
Phi=chain_Phi[1,],
Nu,
nCov=nCov_v,
tau=chain_tau[1],
sigma2=1,
model,
nMRA=nn,
Y,X,XR,
aa=aa_P,
types)
SigmaYinv_old <- like_res_start$SigmaYinv
logSigmaYdet_old <- like_res_start$logSigmaYdet
logSigmaYdet_old
sd_Phi <- c(0.05)
#a_n_1 <- 100
sd_tau <- 0.001
Ysample <- matrix(0,nrow = dim(SigmaYinv_old)[1],ncol = iterations)
i=1
show(i)
tic()
chain_beta[i+1,] <- Gibbs_beta(SigmaYinv_old,dim(chain_beta)[2])
m2loglike_old <- likelihood_no_MRA(chain_beta[i+1,],SigmaYinv_old,
logSigmaYdet_old,Y,X)
m2loglike_old
proposal_Phi <- proposalfunction_Phi(chain_Phi[c(1:i),],i,sd_Phi)
#proposal_A2 <- proposalfunction_A2(chain_A2,i,a_n_1)
proposal_tau <- proposalfunction_tau(chain_tau,i,sd_tau)
proposal_Phi
proposal_tau
## MCMC Phi###
fold_Phi <- f_P_tau(  chain_beta[i+1,],A1,chain_Phi[i,],
chain_tau[i],m2loglike_old,proposal_Phi,proposal_tau,
sd_Phi,sd_tau,'old',types[1],types[2])$like
fnew_Phi_p <- f_P_tau(chain_beta[i+1,],A1, proposal_Phi,
proposal_tau,m2loglike_old,chain_Phi[i,],chain_tau[i],
sd_Phi,sd_tau,'new',types[1],types[2])
fnew_Phi <- fnew_Phi_p$like
probab_Phi <- min(0,fnew_Phi -fold_Phi)
fnew_Phi_p
library(ezknitr)
for(i in 1:5){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 12
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:5){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 1
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:5){
model <- "MRA2" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 1
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:5){
model <- "MRA2" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 1
#i <- 1 # simulation ID # from 1 to 10
burn<- 500  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:5){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 1
#i <- 1 # simulation ID # from 1 to 10
burn<- 500  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:5){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 2
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:5){
model <- "MRA2" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 2
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:6){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 2
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
library(ezknitr)
for(i in 1:6){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 2
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:8){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 2
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:8){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 2
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknitr::ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:9){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 2
#i <- 1 # simulation ID # from 1 to 10
burn<- 1  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknitr::ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
for(i in 1:9){
model <- "MRA1" # "MRA2"
type <- "Exponential" # "Matern"
nres <- 2
#i <- 1 # simulation ID # from 1 to 10
burn<- 500  #1100 for nres=2 and 500 for nres=1
output_suffix<-paste0("_",model,type,nres,"sim",i,".Rdata")
ezknitr::ezknit(file = "2.Output.Rmd", out_dir = "output",
fig_dir = "myfigs",out_suffix=output_suffix,
params=list(model=model,type=type,nres=nres,i=i,
burn=burn),
keep_md = FALSE,
keep_html = TRUE)
}
